autoload -U colors && colors
autoload -U promptinit && promptinit
autoload -U compinit && compinit

if [[ $EUID == 0 ]]; then
    _prompt_char='%F{red}#%f'
else
    _prompt_char="%F{green}\$%f"
fi

PROMPT="[%F{105}%n@%m%f:%F{214}%c%f]${_prompt_char} "
RPROMPT="%(?.%F{green}✓%f.%F{red}✗%f)"

HISTFILE=~/.history
HISTSIZE=100000
SAVEHIST=100000

# Do not clobber history file when a new terminal is opened.
setopt APPEND_HISTORY

# Import new commands from the history file and cause typed commands to be
# appended to the history file.
setopt SHARE_HISTORY

# Do not enter command lines into the history list if they are duplicates of the
# previous event.
setopt HIST_IGNORE_DUPS

# When writing out the history file, older commands that duplicate newer ones
# are omitted.
setopt HIST_SAVE_NO_DUPS

# If the internal history needs to be trimmed to add the current command line,
# setting this option will cause the oldest history event that has a duplicate
# to be lost before losing a unique event from the list.
setopt HIST_EXPIRE_DUPS_FIRST

# When writing out the history file, older commands that duplicate newer ones
# are omitted.
setopt HIST_FIND_NO_DUPS

# Remove superfluous blanks from each command line being added to the history
# list.
setopt HIST_REDUCE_BLANKS

# Remove command lines from the history list when the first character on the
# line is a space, or when one of the expanded aliases contains a leading space.
setopt HIST_IGNORE_SPACE

# Save each command's beginning timestamp (in seconds since the epoch) and the
# duration (in seconds) to the history file.
setopt EXTENDED_HISTORY

# Treat the '#', '~' and '^' characters as part of patterns for filename
# generation, etc.
setopt EXTENDED_GLOB

LESS="isR"
export LESS

# PATH
if [[ $OSTYPE =~ "darwin" ]]; then
    PATH="/usr/local/opt/coreutils/libexec/gnubin:/usr/local/sbin:usr/local/bin:$PATH"
    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
fi

PATH="$HOME/bin:$PATH"

# Use the correct ls(1) options to specify long mtime output
if [[ $OSTYPE =~ "linux-gnu|cygwin" ]]; then
    alias ls='ls --color=tty'
    alias ll='ls -l --time-style="+%a, %d %h %Y %T %z"'
elif [[ $OSTYPE =~ "freebsd|darwin" ]]; then
    if [[ -n $(whence gls) ]]; then
        alias ls='gls --color=auto'
        alias ll='ls -l --time-style="+%a, %d %h %Y %T %z"'
    else
        alias ls='ls -G'
        if [[ $OSTYPE =~ "freebsd" ]]; then
            alias ll='ls -lD"%a, %d %h %Y %T %z"'
        else # if OSX
            alias ll='ls -lT'
        fi
    fi

    alias dircolors=$(whence -p gdircolors dircolors | head -1)
fi

alias la='ll -A'
alias grep='grep --color=auto'

llp() {
    ll --color=always "$@" | less
}

# dircolors
if whence dircolors >&/dev/null && [[ -e ~/.dircolors ]]; then
    eval $(dircolors -b ~/.dircolors)
fi

zmodload zsh/complist
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Colored man pages
man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;38;5;105m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[30;47;5;105m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[4;38;5;105m") \
        man -P less "$@"
}

CSCOPE_EDITOR=$(whence -p vim); export CSCOPE_EDITOR

if [ -f "$HOME/.iterm2_shell_integration.zsh" ]; then
    source "$HOME/.iterm2_shell_integration.zsh"
fi

# FZF setup; https://github.com/junegunn/fzf
export FZF_DEFAULT_OPTS="
--extended-exact
--color fg:252,hl:67,fg+:252,hl+:81
--color info:144,prompt:161,spinner:135,pointer:135,marker:118
"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use  # This loads nvm

if [ -f '/usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh' ]; then
    source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

fpath=(/usr/local/share/zsh-completions $fpath)

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/google-cloud-sdk/path.zsh.inc' ]; then source '/usr/local/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/google-cloud-sdk/completion.zsh.inc' ]; then source '/usr/local/google-cloud-sdk/completion.zsh.inc'; fi

# kubectl completions
command -v kubectl &>/dev/null && source <(kubectl completion zsh)
