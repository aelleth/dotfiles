""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Required for Vundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if &compatible
	set nocompatible
endif
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
let &runtimepath.=',~/.vim/bundle/ale'
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Plugins, plugins, plugins
Plugin 'bling/vim-airline'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'tpope/vim-fugitive'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tomtom/tcomment_vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-eunuch'
Plugin 'majutsushi/tagbar'
Plugin 'jlfwong/vim-mercenary'
Plugin 'tpope/vim-dispatch'
Plugin 'scrooloose/nerdtree'
Plugin 'wincent/Command-T'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'w0rp/ale'

call vundle#end()
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               General settings                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TAB COMPLETION
" --------------

" First tab: complete till longest common string
" Second tab: list all matches
" Third and subsequent tabs: cycle through completion options
set wildmode=longest,list,full

" Use wildmenu for list mode above
set wildmenu

" Insert mode completion options
" Use a popup menu to see all possible completions (even if there is only one
" match).  Only insert the longest common text for all matches.
set completeopt=menu,menuone,longest

" Jump to the first open window that contains the specified buffer.  Also
" consider windows in other tab pages.
set switchbuf=useopen,usetab

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Display settings                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number
set showmatch
set showmode
set showcmd
set ruler
set title
set wildmenu
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,.svn
set laststatus=2
set matchtime=2
set matchpairs+=<:>

set t_Co=256
set t_cl="\<Esc>[H\<Esc>[J"
syntax enable
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
colorscheme solarized

" Do not highlight search criteria
set nohlsearch

" ... except as we type
set incsearch

" Make global search/replace the default option
set gdefault

set colorcolumn=+1

" Number of screen lines to use for the command line
set cmdheight=2
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Editor settings                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Function keys that start with <Esc> are recognised in insert mode
set esckeys

" Case-insensitive searching
set ignorecase

" Become case-sensitive if we type uppercase characters
set smartcase

" On new lines, match the indent of the previous line
set autoindent

" Copy the previous indentation on autoindenting
set copyindent

" Smart indenting for C-like code
set cindent

" C indentation options
"  - Align C++ scope declarations with the enclosing block
"  - Do not use extra indentation for code inside a C++ namespace
"  - Do not indent function return type if it is on a standalone line
"  - With unclosed parentheses, align with the next non-whitespace character
"  after the opening parenthesis
"  - Indent the line after a line where an unclosed parenthesis is the last
"  character by 4 spaces
set cinoptions=g0,N-s,t0,(0,W4

" Smart tab handling for indenting
set smarttab

" Change the way backslashes are used inside search patterns
set magic

" Allow backspacing over everything in insert mode
set bs=indent,eol,start

" Number of visual spaces that a Tab character ('\x09') counts for
set tabstop=4

" Number of spaces to use for each step of (auto)indent
set shiftwidth=4

" Number of spaces a tab counts for while performing editing operations
set softtabstop=4

" Round indent to a multiple of shiftwidth
set shiftround

" Expand a tab into spaces
set expandtab

" The status line is now always shown
set laststatus=2

" Do not show editing mode
set noshowmode

" Default file mode is Unix (LF)
set fileformat=unix

set fileformats=unix,dos,mac
set mouse=a

" Use UTF-8
set encoding=utf-8
set termencoding=utf-8

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               System settings                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set lazyredraw
set confirm

" No backup~ files
set nobackup
set viminfo='20,\"500
set hidden
set history=5000

" Many undo levels
set undolevels=1000

" Enables the mouse in all modes
set mouse=a

set cscopequickfix=s-,c-,d-,i-,t-,e-

if has("autocmd")
	" Automatically change to the directory the current file resides in
	" autocmd BufEnter * lcd %:p:h
	augroup mysettings
		au FileType text set textwidth=80
		au FileType c,cpp
					\ set textwidth=80
					\ tabstop=8
					\ softtabstop=8
					\ shiftwidth=8
					\ noexpandtab
					\ cindent
					\ cinoptions=(4200,u4200,+0.5s,*500,:0,t0,U4200
					\ indentexpr=IgnoreParenIndent()
					\ indentkeys=0{,0},0),:,0#,!^F,o,O,e
		au FileType python
					\ set tabstop=4 softtabstop=4 expandtab shiftwidth=4
		au FileType xslt,xml,css,html
					\ set smartindent shiftwidth=2 softtabstop=2
	augroup END

	autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
endif

highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

set tags=./tags;/
if has("cscope")
	set csto=0
	set cst
	set nocsverb

	let cscope_file=findfile("cscope.out", ".;")
	let cscope_pre=matchstr(cscope_file, ".*/")

	if (!empty(cscope_file) && filereadable(cscope_file))
		exe "cs add" cscope_file cscope_pre
	endif
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              Plugins roam here                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_powerline_fonts=1
let g:airline_theme='solarized'
let g:tagbar_usearrows=1

" ale
let g:ale_set_quickfix = 1
let g:ale_sign_error = 'üêû'
let g:ale_sign_warning = 'üí©'

let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1
let g:syntastic_always_populate_loc_list = 1

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Key mappings                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F8> :TagbarToggle<CR>
map <F10> :Make<CR>

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
